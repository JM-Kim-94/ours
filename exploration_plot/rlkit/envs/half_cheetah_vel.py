
import numpy as np
import random
from . import register_env
from .half_cheetah import HalfCheetahEnv


@register_env('cheetah-vel')
class HalfCheetahVelEnv(HalfCheetahEnv):
    """Half-cheetah environment with target velocity, as described in [1]. The
    code is adapted from
    https://github.com/cbfinn/maml_rl/blob/9c8e2ebd741cb0c7b8bf2d040c4caeeb8e06cc95/rllab/envs/mujoco/half_cheetah_env_rand.py

    The half-cheetah follows the dynamics from MuJoCo [2], and receives at each
    time step a reward composed of a control cost and a penalty equal to the
    difference between its current velocity and the target velocity. The tasks
    are generated by sampling the target velocities from the uniform
    distribution on [0, 2].

    [1] Chelsea Finn, Pieter Abbeel, Sergey Levine, "Model-Agnostic
        Meta-Learning for Fast Adaptation of Deep Networks", 2017
        (https://arxiv.org/abs/1703.03400)
    [2] Emanuel Todorov, Tom Erez, Yuval Tassa, "MuJoCo: A physics engine for
        model-based control", 2012
        (https://homes.cs.washington.edu/~todorov/papers/TodorovIROS12.pdf)
    """

    # def __init__(self, task={}, n_tasks=2, randomize_tasks=True):
    #     self._task = task
    #     self.tasks = self.sample_tasks(n_tasks)
    #     self._goal_vel = self.tasks[0].get('velocity', 0.0)
    #     self._goal = self._goal_vel
    #     super(HalfCheetahVelEnv, self).__init__()

    def __init__(self, task={}, num_train_tasks=10, eval_tasks_list=[], indistribution_train_tasks_list=[], TSNE_tasks_list=[], ood_type="inter",
                 linear_sorting=0, use_ref_task=0, randomize_tasks=True, expert=False):
        self.expert = expert
        self._task = task
        self.tasks = self.sample_tasks(num_train_tasks, eval_tasks_list, indistribution_train_tasks_list, TSNE_tasks_list, ood_type, linear_sorting,
                                       use_ref_task)
        print("all tasks : ", self.tasks)
        self._goal_vel = self.tasks[0].get('velocity', 0.0)
        self._goal = self._goal_vel
        super(HalfCheetahVelEnv, self).__init__()
    
    def get_obs_dim(self):
        return int(np.prod(self._get_obs().shape))

    def step(self, action):
        xposbefore = self.sim.data.qpos[0]
        self.do_simulation(action, self.frame_skip)
        xposafter = self.sim.data.qpos[0]

        forward_vel = (xposafter - xposbefore) / self.dt
        forward_reward = -1.0 * abs(forward_vel - self._goal_vel)
        ctrl_cost = 0.5 * 1e-1 * np.sum(np.square(action))

        observation = self._get_obs()
        reward = forward_reward - ctrl_cost
        done = False
        infos = dict(reward_forward=forward_reward, reward_ctrl=-ctrl_cost, task=self._task)

        return observation, reward, done, infos

    def sample_tasks(self, num_train_tasks, eval_tasks_list, indistribution_train_tasks_list, TSNE_tasks_list, ood_type, linear_sorting, use_ref_task):
        print("num_train_tasks:", num_train_tasks)
        # np.random.seed(1337)

        if self.expert:
            velocities_train = [0.75, 1.25, 1.75, 2.25, 2.75]
        else:
            velocities_train = []
        if ood_type == "inter":
            for i in range(num_train_tasks):
                prob = random.random()
                if prob >= 0.5:
                    vel_train = random.uniform(0, 0.5)
                else:
                    vel_train = random.uniform(3.0, 3.5)
                velocities_train.append(vel_train)
        
        elif ood_type == "extra":
            for i in range(num_train_tasks):
                vel_train = random.uniform(0.5, 3.0)
                velocities_train.append(vel_train)
        
        elif ood_type == "extra-hard":
            for i in range(num_train_tasks):
                vel_train = random.uniform(1.0, 2.5)
                velocities_train.append(vel_train)


        # velocities_test = list(np.linspace(0.75, 2.75, 5))
        velocities_test = eval_tasks_list

        velocities_indistribution = indistribution_train_tasks_list

        velocities_tsne = TSNE_tasks_list

        train_tsne_tasks = [0.1, 0.2, 0.3, 0.4, 0.5] + [3.0, 3.1, 3.2, 3.3, 3.4, 3.5]  # 11개
        test_tsne_tasks = [0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9]  # 24개


        velocities = velocities_train + velocities_test + velocities_indistribution + velocities_tsne + train_tsne_tasks + test_tsne_tasks
        tasks = [{"velocity": velocity} for velocity in velocities]

        return tasks

    def get_all_task_idx(self):
        return list(range(len(self.tasks))), self.tasks

    def reset_task(self, idx):
        self._task = self.tasks[idx]
        self._goal_vel = self._task['velocity']
        self._goal = self._goal_vel
        self.reset()





